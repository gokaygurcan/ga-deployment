name: Workflow

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
  release:
    types:
      - created

env:
  GITHUB: ${{ toJson(github) }}
  NODE_VERSION: 16

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - id: checkout
      name: Checkout
      uses: actions/checkout@v3

    - id: sanity-check
      name: Sanity check
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        JOB_CONTEXT: ${{ toJson(job) }}
        STEPS_CONTEXT: ${{ toJson(steps) }}
        RUNNER_CONTEXT: ${{ toJson(runner) }}
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: |
        printenv
        echo "$PATH"
        echo "$GITHUB_CONTEXT"
        echo "$JOB_CONTEXT"
        echo "$STEPS_CONTEXT"
        echo "$RUNNER_CONTEXT"
        echo "$STRATEGY_CONTEXT"
        echo "$MATRIX_CONTEXT"
        which node
        node --version
        which npm
        npm --version
        which grunt
        grunt --version
        which make
        make --version
        which jq
        jq --version
        pwd
        ls -lah .

    - id: cache-dependencies
      name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          **/.cache
        key: node-modules-${{ secrets.CACHE_VERSION }}-${{ hashFiles('package.json') }}

    - id: install-dependencies
      name: Install dependencies
      if: |
        (steps.cache-dependencies.outputs.cache-hit != 'true')
      run: |
        npm install --verbose
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged != true)
    needs: [ setup ]
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - id: checkout
      name: Checkout
      uses: actions/checkout@v3

    - id: cache-dependencies
      name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          **/.cache
        key: node-modules-${{ secrets.CACHE_VERSION }}-${{ hashFiles('package.json') }}

    - id: lint
      name: Lint
      run: |
        npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged != true)
    needs: [ lint ]
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - id: checkout
      name: Checkout
      uses: actions/checkout@v3

    - id: cache-dependencies
      name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          **/.cache
        key: node-modules-${{ secrets.CACHE_VERSION }}-${{ hashFiles('package.json') }}

    - id: test
      name: Test
      run: |
        npm run test

  tag:
    name: Tag
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    needs: [ setup ]
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - id: checkout
      name: Checkout
      uses: actions/checkout@v3

    - id: cache-dependencies
      name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          **/.cache
        key: node-modules-${{ secrets.CACHE_VERSION }}-${{ hashFiles('package.json') }}

    - id: identity
      name: Identity
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git config --list

    - id: release-action
      name: Release action
      uses: K-Phoen/semver-release-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
      with:
        release_branch: master
        release_strategy: tag

    - id: push-tag
      name: Push tag
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "$VERSION"
        
        # push new tag
        git tag -a $VERSION -m "$VERSION"
        git push origin $VERSION
